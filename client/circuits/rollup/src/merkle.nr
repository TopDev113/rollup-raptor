use dep::std;
use crate::helpers::combine;
// Struct to prove merkle paths
struct Merkle{
    leaf: [u8;32],
    // len depends on depth (4 => tree of depth 5 including root)
    path: [[u8;32];4],
    position: [u8;4],
    root: [u8;32]
}
impl Merkle{
    fn reconstruct(self) -> [u8;32]{
        let mut current_hash: [u8;32] = [0;32];
        if self.position[0] == 0{
            current_hash = std::hash::sha256(combine(self.leaf, self.path[0]));
        }
        else{
            current_hash = std::hash::sha256(combine(self.path[0], self.leaf));
        };
        for i in 1..self.path.len(){
            if self.position[i] == 0{
                current_hash = std::hash::sha256(combine(current_hash, self.path[i]));
            }
            else{
                current_hash = std::hash::sha256(combine(self.path[i], current_hash));
            }
        };
        //std::println(current_hash);
        //std::println(self.root);
        current_hash
    }
}

#[test]
fn test_merkle(){
    let merkle = Merkle{
        leaf: [205, 46, 23, 231, 250, 174, 164, 51, 242, 170, 114, 211, 48, 56, 191, 177, 214, 40, 36, 97, 162, 90, 42, 155, 37, 167, 7, 33, 149, 179, 214, 178],
        path: [
            [102, 104, 122, 173, 248, 98, 189, 119, 108, 143, 193, 139, 142, 159, 142, 32, 8, 151, 20, 133, 110, 226, 51, 179, 144, 42, 89, 29, 13, 95, 41, 37],
            [46, 235, 116, 166, 23, 127, 88, 141, 128, 192, 199, 82, 185, 149, 86, 144, 45, 223, 150, 130, 208, 185, 6, 245, 170, 42, 219, 175, 132, 102, 164, 233],
            [18, 35, 52, 154, 64, 210, 238, 16, 189, 27, 235, 181, 136, 158, 248, 1, 140, 139, 193, 51, 89, 237, 148, 179, 135, 129, 10, 249, 108, 110, 66, 104],
            [91, 130, 182, 149, 167, 172, 38, 104, 225, 136, 183, 95, 125, 79, 167, 159, 170, 80, 65, 23, 209, 253, 252, 190, 138, 70, 145, 92, 26, 138, 81, 145]
        ],
        position: [0,0,0,0],
        root: [47, 51, 123, 206, 240, 238, 122, 236, 88, 69, 233, 27, 115, 13, 227, 234, 77, 229, 53, 70, 12, 141, 81, 241, 106, 69, 63, 112, 140, 224, 21, 118]
    };
    assert(merkle.reconstruct() == [47, 51, 123, 206, 240, 238, 122, 236, 88, 69, 233, 27, 115, 13, 227, 234, 77, 229, 53, 70, 12, 141, 81, 241, 106, 69, 63, 112, 140, 224, 21, 118]);
}


/*
Root: [47, 51, 123, 206, 240, 238, 122, 236, 88, 69, 233, 27, 115, 13, 227, 234, 77, 229, 53, 70, 12, 141, 81, 241, 106, 69, 63, 112, 140, 224, 21, 118]
Circuit Inputs: [([205, 46, 23, 231, 250, 174, 164, 51, 242, 170, 114, 211, 48, 56, 191, 177, 214, 40, 36, 97, 162, 90, 42, 155, 37, 167, 7, 33, 149, 179, 214, 178], false), 
([102, 104, 122, 173, 248, 98, 189, 119, 108, 143, 193, 139, 142, 159, 142, 32, 8, 151, 20, 133, 110, 226, 51, 179, 144, 42, 89, 29, 13, 95, 41, 37], true), 
([46, 235, 116, 166, 23, 127, 88, 141, 128, 192, 199, 82, 185, 149, 86, 144, 45, 223, 150, 130, 208, 185, 6, 245, 170, 42, 219, 175, 132, 102, 164, 233], true), 
([18, 35, 52, 154, 64, 210, 238, 16, 189, 27, 235, 181, 136, 158, 248, 1, 140, 139, 193, 51, 89, 237, 148, 179, 135, 129, 10, 249, 108, 110, 66, 104], true),
([91, 130, 182, 149, 167, 172, 38, 104, 225, 136, 183, 95, 125, 79, 167, 159, 170, 80, 65, 23, 209, 253, 252, 190, 138, 70, 145, 92, 26, 138, 81, 145], true)]
*/